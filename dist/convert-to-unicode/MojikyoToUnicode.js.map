{"version":3,"file":"MojikyoToUnicode.js","sourceRoot":"","sources":["../../src/convert-to-unicode/MojikyoToUnicode.ts"],"names":[],"mappings":"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","sourcesContent":["import { MojikyoPlus, MojikyoRemapped } from './MojikyoMappingsExtra';\nimport { Mojikyo } from './MojikyoMappings';\nimport { XXZT } from './XXZTMappings';\n\n// Source : <http://www.babelstone.co.uk/Unicode/tangut.js>\n// Unicode Text Styler at <http://www.babelstone.co.uk/Unicode/xxzt.html>\n// Title : tangut.js\n// Author : Andrew West\n// Date Created : 2018-12-04\n\n// UTF-8 Constants\nconst ReplacementCharacter = 0xFFFD;\t// U+FFFD REPLACEMENT CHARACTER\nconst CharactersPerPlane = 65536;\nconst HighSurrogateFirst = 0xD800;\t\t// U+D800\nconst HighSurrogateLast = 0xDBFF;\t\t// U+DBFF\nconst LowSurrogateFirst = 0xDC00;\t\t// U+DC00\nconst LowSurrogateLast = 0xDFFF;\t\t// U+DFFF\nconst HalfShift = 10;\nconst HalfBase = 65536;\t\t// 0x10000;\nconst HalfMask = 0x03FF;\n\nexport function convert(input: string, mapping: 'XXZT' | 'Mojikyo', version: 1 | 2): string {\n  let output = '';\n  let high = 0;\n\n  for (let i = 0; i < input.length; i++) {\n    let char = input.charCodeAt(i);\n\n    if (HighSurrogateFirst <= char && char <= HighSurrogateLast) {\n      if (high !== 0) {\n        output += String.fromCharCode(ReplacementCharacter);\n      }\n      high = char;\n      continue;\n    } else if (LowSurrogateFirst <= char && char <= LowSurrogateLast) {\n      if (high === 0) {\n        char = ReplacementCharacter;\n      } else {\n        char = FromSurrogates(high, char);\n        high = 0;\n      }\n    } else {\n      if (high !== 0) {\n        output += String.fromCharCode(ReplacementCharacter);\n        high = 0;\n      }\n    }\n\n    if (0x4E00 <= char && char <= 0x9FA5) {\n      if (mapping === 'XXZT') {\n        const charmap: [number, number, number] = XXZT.find(m => m[0] === char)!;\n        char = charmap[version];\n      }\n\n      if (mapping === 'Mojikyo') {\n        const charmap: [number, number, number] = Mojikyo.find(m => m[0] === char)!;\n        const charmapPlus: [number, number] = MojikyoPlus.find(m => m[0] === char)!;\n        const charmapRemapped: [number, number] = MojikyoRemapped.find(m => m[0] === char)!;\n\n        const chout1 = charmap[1];\n        let chout2 = charmap[2];\n\n        if ((chout2 === 0xFFFE) && (version === 1)) {\n          chout2 = 0xFFFF;\n        }\n\n        if (chout1 === 0xFFFF) {\n          char = chout2;\n        } else if (chout2 === 0xFFFF) {\n          char = chout1;\n        } else {\n          if (version === 2) {\n            if (chout2 === 0xFFFE) {\n              chout2 = charmapPlus[1];\n            } else {\n              chout2 = charmapRemapped[1] || chout2;\n            }\n          }\n\n          const a = ToSurrogates(chout1);\n          const b = ToSurrogates(chout2);\n          output += '{';\n          output += String.fromCharCode(a[0], a[1]);\n          output += '|';\n          output += String.fromCharCode(b[0], b[1]);\n          output += '}';\n          char = 0xFFFF;\n        }\n      }\n    }\n\n    if (char !== 0xFFFF) {\n      if (char < CharactersPerPlane) {\n        output += String.fromCharCode(char);\n      } else {\n        const a = ToSurrogates(char);\n        const hi = a[0];\n        const lo = a[1];\n        output += String.fromCharCode(hi, lo);\n      }\n    }\n  }\n\n  return output;\n}\n\n// tslint:disable-next-line: no-any\nfunction ToSurrogates(cp: number): [number, number] {\n  let hi = cp;\n  let lo = 0;\n\n  if (cp > CharactersPerPlane) {\n    cp -= CharactersPerPlane;\n    hi = (HighSurrogateFirst | ((cp >>> HalfShift) & HalfMask));\n    lo = (LowSurrogateFirst | (cp & HalfMask));\n  }\n\n  return [hi, lo];\n}\n\nfunction FromSurrogates(hi: number, lo: number): number {\n  let cp = ReplacementCharacter;\n  if (((hi >= HighSurrogateFirst) && (hi <= HighSurrogateLast)) && ((lo >= LowSurrogateFirst) && (lo <= LowSurrogateLast))) {\n    cp = (((hi - HighSurrogateFirst) << HalfShift) + (lo - LowSurrogateFirst) + HalfBase);\n  }\n\n  return cp;\n}\n"]}