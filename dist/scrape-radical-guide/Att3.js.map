{"version":3,"file":"Att3.js","sourceRoot":"","sources":["../../src/scrape-radical-guide/Att3.ts"],"names":[],"mappings":"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","sourcesContent":["import { Browser, launch, Page } from 'puppeteer';\nimport { GUID } from '../utils/UUID';\n\nexport const getData = async (): Promise<void> => {\n  const browser: Browser = await launch({ headless: false });\n  const page: Page = await browser.newPage();\n  await page.goto('http://www.babelstone.co.uk/Tangut/XHZD_Index.html');\n  await page.evaluate(async () => {\n    const headers: HTMLHeadingElement[] = Array.from(document.querySelectorAll('h1, h2, h3, h4, h5, h6'));\n\n    const findNextSiblingMatching = (el: Element | null, matcher: (el: Element) => boolean): Element | null => {\n      if (el === null || matcher(el)) {\n        return el;\n      } else {\n        return findNextSiblingMatching(el.nextElementSibling, matcher);\n      }\n    };\n\n    let counter: number = 0;\n    const getGuid = (): string => {\n      counter += 1;\n      return `${counter}`;\n    };\n    // tslint:disable-next-line:max-line-length\n    const findAllNextSiblingMatchingButStopAt = (el: Element | null, matcher: (el: Element) => boolean, shouldStop: (el: Element) => boolean): (Element | null)[] => {\n      if (el === null || shouldStop(el)) {\n        return [null];\n      } else if (matcher(el)) {\n        return [el, ...findAllNextSiblingMatchingButStopAt(el.nextElementSibling, matcher, shouldStop)];\n      } else {\n        return findAllNextSiblingMatchingButStopAt(el.nextElementSibling, matcher, shouldStop);\n      }\n    };\n\n    abstract class ExtractorNode<ChildType extends ExtractorNode<any, any> | undefined, DataType> {\n      public constructor(public el: Element | null) { }\n      public guid: string = getGuid();\n      public children: ChildType[] = [];\n      public get childGuids(): string[] {\n        return this.children.filter(s => s).map(s => s!.guid);\n      }\n\n      public abstract get data(): DataType;\n      public abstract populate: () => Promise<any>;\n    }\n\n    class RootPopulator extends ExtractorNode<RadicalSupergroup, undefined> {\n      public populate = async () => {\n        this.children = Array.from(findNextSiblingMatching(\n          headers.filter((element: HTMLHeadingElement) => {\n            return element.textContent === 'Arrangement of Radicals';\n          })[0],\n          (elem) => elem.tagName === 'UL')!.querySelectorAll('a'))\n          .map(x => x.href.split('#')[1])\n          .map(x => document.querySelectorAll(`a[name=\"${x}\"]`)[0].nextElementSibling!)\n          .map(x => new RadicalSupergroup(x));\n        this.children.forEach(child => child.populate());\n        // Promise.all(this.children.map(supergroup => supergroup.populate));  // TODO: figure out why this doesn't work\n      }\n\n      public get data(): undefined {\n        return undefined;\n      }\n    }\n\n    class RadicalSupergroup extends ExtractorNode<RadicalGroup, string> {\n      public populate = async () => {\n        this.children = Array.from(\n          findAllNextSiblingMatchingButStopAt(this.el!.nextElementSibling, z => z.tagName === 'H4', z => z.tagName === 'H3')\n          .filter(x => x)\n          .map(x => new RadicalGroup(x!))\n        );\n        this.children.forEach(child => child.populate());\n      }\n      public get data(): string { return this.el!.textContent!; }\n    }\n\n    class RadicalGroup extends ExtractorNode<Radical, string> {\n      public populate = async () => {\n        this.children = Array.from(\n          findNextSiblingMatching(this.el, z => z.tagName === 'TABLE')!\n            .querySelectorAll('a'))\n            .filter(x => x)\n            .map(x => new Radical(x));\n        this.children.forEach(child => child.populate());\n      }\n      public get data(): string { return this.el!.textContent!; }\n    }\n\n    class Radical extends ExtractorNode<StrokeCountGroupings, string> {\n      public populate = async () => {\n        const aname: string = (this.el! as HTMLAnchorElement).href!.split('#')[1];\n        const header = document.querySelectorAll(`a[name=\"${aname}\"]`)[0].nextElementSibling!;\n        const groupings = findAllNextSiblingMatchingButStopAt(header.nextElementSibling, (z) => z.tagName === 'H4', z => z.tagName === 'H3')\n              .filter(z => z);\n        if (groupings.length === 0) {\n          this.children = [new StrokeCountGroupings(header)];\n        } else {\n          this.children = Array.from(groupings.map(x => new StrokeCountGroupings(x)));\n        }\n        this.children.forEach(child => child.populate());\n      }\n      public get data(): string { return this.el!.textContent!; }\n    }\n\n    class StrokeCountGroupings extends ExtractorNode<Character, string> {\n      public populate = async () => {\n        this.children = Array.from(\n          findNextSiblingMatching(this.el!, z => z.tagName === 'TABLE')!\n          .querySelectorAll('tr'))\n          .map(x => new Character(x));\n        this.children.forEach(child => child.populate());\n      }\n      public get data(): string { return this.el!.textContent!; }\n    }\n\n    class Character extends ExtractorNode<undefined, {}> {\n      public populate = async () => {\n        return Promise.resolve();\n      }\n      public get data(): {} {\n        const featurized: HTMLElement[] = Array.from(this.el!.querySelectorAll('td, th'));\n        return {\n          characterMojikyo: featurized[0].textContent!,\n          characterFont: featurized[0].className!,\n          romanization: featurized[2].textContent!,\n          decimalIndex: featurized[3].textContent!,\n          romanIndex: featurized[4].textContent!,\n          characterId: featurized[5].textContent!,\n        };\n      }\n    }\n\n    const root = new RootPopulator(null);\n    await root.populate();\n    console.error(root); // JSON.stringify(root));\n\n  });\n\n  // await browser.close();\n};\n\nexport abstract class BaseTing {\n  public constructor(public el: Element | null) {\n  }\n  public guid: string = GUID.getGuid();\n  public populate = async () => {\n    return Promise.resolve();\n  }\n\n  public get data(): {} {\n    return {};\n  }\n}\n"]}